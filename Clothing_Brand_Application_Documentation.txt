CLOTHING BRAND DJANGO APPLICATION DOCUMENTATION
================================================

TABLE OF CONTENTS
=================
1. Application Overview
2. Project Structure
3. Workflow Overview
4. File-by-File Breakdown
5. Database Models
6. Authentication System
7. Key Features
8. How to Run
9. Technical Details
10. Security Considerations
11. Troubleshooting

APPLICATION OVERVIEW
====================

This is a Django-based e-commerce application for a clothing brand that sells suits and polo shirts. The application provides user authentication, product management, shopping cart functionality, and an admin panel for managing users and products.

PROJECT STRUCTURE
=================

Clothing_Brand/
├── Clothing_Brand/          # Main Django project folder
│   ├── __init__.py
│   ├── settings.py          # Django configuration
│   ├── urls.py             # Main URL routing
│   ├── asgi.py             # ASGI configuration
│   └── wsgi.py             # WSGI configuration
├── everything/              # Main Django app
│   ├── __init__.py
│   ├── admin.py            # Django admin configuration
│   ├── apps.py             # App configuration
│   ├── form.py             # Form definitions
│   ├── models.py           # Database models
│   ├── views.py            # View functions (main logic)
│   └── migrations/         # Database migration files
├── Templates/               # HTML template files
├── static/                  # CSS, JavaScript, and image files
├── manage.py               # Django management script
└── db.sqlite3              # SQLite database

WORKFLOW OVERVIEW
=================

1. USER JOURNEY
---------------
1. Homepage: Users land on the home page where they can see available products
2. Authentication: Users must login/signup to access shopping features
3. Browsing: Users can browse suits and polo shirts
4. Shopping Cart: Authenticated users can add items to cart and manage quantities
5. Admin Panel: Admin users can manage products and users

2. AUTHENTICATION FLOW
----------------------
1. User submits login/signup form
2. System validates credentials or creates new account
3. JWT token is generated and stored in cookies
4. Token is validated on each protected page access
5. User is redirected to login if token is invalid/expired

FILE-BY-FILE BREAKDOWN
======================

1. DJANGO PROJECT FILES
------------------------

SETTINGS.PY
- Purpose: Main configuration file for Django
- Key Settings:
  * SECRET_KEY: Used for JWT token signing
  * ALGORITHM: JWT algorithm (HS256)
  * INSTALLED_APPS: Lists 'everything' as the main app
  * DATABASES: SQLite database configuration
  * TEMPLATES: Points to Templates folder
  * STATICFILES_DIRS: Points to static folder

URLS.PY
- Purpose: Main URL routing configuration
- Routes:
  * /: Home page
  * /login: Login/signup page
  * /suits: Suits listing page
  * /polo: Polo shirts listing page
  * /cart: Shopping cart page
  * /admin: Admin panel
  * Product detail pages for suits and polos

2. MAIN APP FILES (everything/)
-------------------------------

MODELS.PY
Purpose: Defines database structure

User_Model:
- user_id: Unique identifier for each user
- username: User's login name
- password: User's password (stored as plain text - not secure for production)
- email: User's email address
- dob: Date of birth
- gender: User's gender
- isadmin: Boolean flag for admin privileges

Products:
- product_id: Unique identifier for each product
- product_name: Name of the product
- price: Product price
- quantity: Available stock quantity
- description: Product description
- rating: Product rating
- photo: Product image
- product_type: 0 for suits, 1 for polo shirts

Cart:
- userID: References the user who owns the cart item
- productID: References the product in the cart
- quantity: Quantity of the product in cart

VIEWS.PY
Purpose: Contains all the business logic and view functions

Key Functions:

1. Validator Decorator:
   - Checks if user has valid JWT token
   - Decodes token and attaches user data to request
   - Redirects to login if token is invalid/expired

2. home(request):
   - Displays home page
   - Checks if user is authenticated and admin
   - Passes authentication status to template

3. login(request):
   - Handles both login and signup
   - Creates JWT token on successful login
   - Stores token in cookies

4. cart(request):
   - Shows user's shopping cart
   - Displays product details and quantities
   - Requires authentication (uses @Validator decorator)

5. addtocart(request, id):
   - Adds products to shopping cart
   - Updates product stock quantity
   - Creates new cart item or updates existing one

6. suits_page(request, id) and polo_page(request, id):
   - Shows detailed product pages
   - Displays available quantities for selection

7. adminp(request):
   - Admin panel for managing users and products
   - Only accessible to admin users

8. new_product(request):
   - Allows admins to add new products
   - Handles product form submission

FORM.PY
Purpose: Defines HTML forms for user input

Login_Form:
- Username and password fields for login

SignUp_Form:
- Username, password, email, birth date, and gender fields

New_Product:
- Product creation form with all product fields

ADMIN.PY
Purpose: Configures Django admin interface
- Registers models for admin management

3. TEMPLATE FILES (Templates/)

HTML Templates:
- Home.html: Main landing page
- Login.html: Login and signup forms
- Suits.html: Suits product listing
- Polo.html: Polo shirts product listing
- Suits_page.html: Individual suit product page
- Polo_Page.html: Individual polo product page
- Cart.html: Shopping cart display
- Admin.html: Admin panel interface
- AboutUs.html: About us page

4. STATIC FILES (static/)

CSS Files:
- global.css: Global styling
- Aboutus.css: About us page styling
- contact.css: Contact page styling
- Additional CSS files for specific pages

JavaScript Files:
- main.js: Main JavaScript functionality
- about.js: About page specific JavaScript

Images:
- Product images (polo1.jpg, polo2.jpg, etc.)
- Team member photos
- About us images

DATABASE MODELS
===============

RELATIONSHIPS
-------------
- One-to-Many: User → Cart (one user can have multiple cart items)
- One-to-Many: Product → Cart (one product can be in multiple carts)
- Many-to-Many: Users ↔ Products (through Cart model)

DATA FLOW
---------
1. Users register/login through forms
2. Products are created by admins
3. Users add products to cart
4. Cart items reference both user and product
5. Stock quantities are updated when items are added to cart

AUTHENTICATION SYSTEM
=====================

JWT TOKEN STRUCTURE
-------------------
{
  "userID": "user_id_number",
  "isadmin": true/false
}

SECURITY FEATURES
-----------------
- Token Expiration: JWT tokens can expire
- Algorithm: Uses HS256 for signing
- Cookie Storage: Tokens stored in HTTP-only cookies
- Validation: Every protected page validates token

PROTECTED ROUTES
----------------
- Shopping cart
- Product detail pages
- Admin panel
- Cart management functions

KEY FEATURES
============

1. USER MANAGEMENT
------------------
- User registration and login
- Role-based access control (admin vs regular user)
- User profile management

2. PRODUCT MANAGEMENT
---------------------
- Product catalog with categories (suits, polo shirts)
- Product details with images, descriptions, and ratings
- Stock quantity management
- Admin product creation

3. SHOPPING CART
-----------------
- Add/remove products
- Quantity management
- Stock validation
- Persistent cart storage

4. ADMIN PANEL
--------------
- User management (view, delete)
- Product management (create, delete)
- System overview

HOW TO RUN
==========

PREREQUISITES
-------------
- Python 3.12+
- Django 5.1.4
- PyJWT 2.10.1

SETUP STEPS
-----------
1. Navigate to project directory:
   cd Clothing_Brand/Clothing_Brand

2. Install dependencies:
   pip install -r requirements.txt

3. Run database migrations:
   python manage.py migrate

4. Start development server:
   python manage.py runserver

5. Access application:
   - Open browser and go to http://127.0.0.1:8000/
   - Home page will be displayed

DATABASE
--------
- Uses SQLite by default
- Database file: db.sqlite3
- No initial data setup required

TECHNICAL DETAILS
=================

JWT IMPLEMENTATION
------------------
- Library: PyJWT 2.x
- Algorithm: HS256
- Secret Key: Configured in settings.py
- Token Storage: HTTP cookies
- Validation: On every protected page access

FORM HANDLING
-------------
- Uses Django forms for data validation
- CSRF protection enabled
- Form errors displayed to users

STATIC FILES
------------
- CSS, JavaScript, and images served from static folder
- Configured for development environment
- Templates use Django template language

SECURITY CONSIDERATIONS
=======================

CURRENT IMPLEMENTATION
----------------------
- JWT tokens for authentication
- Form validation
- CSRF protection
- Role-based access control

PRODUCTION RECOMMENDATIONS
--------------------------
- Use HTTPS
- Implement proper password hashing
- Add rate limiting
- Use environment variables for secrets
- Implement proper session management
- Add input sanitization
- Use production-grade database (PostgreSQL/MySQL)

TROUBLESHOOTING
===============

COMMON ISSUES
-------------
1. JWT Import Error: Fixed by updating to JWSDecodeError
2. Database Errors: Run python manage.py migrate
3. Static Files Not Loading: Check STATICFILES_DIRS in settings
4. Template Errors: Verify template paths in settings

DEBUG MODE
----------
- Application runs in debug mode by default
- Detailed error messages displayed
- Auto-reload on code changes

SUMMARY
=======

This documentation provides a comprehensive overview of your Clothing Brand Django application, explaining how each component works together to create a functional e-commerce platform. The application features user authentication with JWT tokens, product management, shopping cart functionality, and an admin panel, all built using Django's robust framework.

The system is designed with a clear separation of concerns, where models handle data structure, views contain business logic, forms manage user input, and templates provide the user interface. The JWT-based authentication system ensures secure access to protected features while maintaining a smooth user experience.

For development and testing purposes, the application uses SQLite database and includes comprehensive error handling and debugging capabilities. The modular design makes it easy to extend and maintain the application as requirements evolve.
